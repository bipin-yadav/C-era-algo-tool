Maximum Pairwise Product


Problem Description

Problem

Given a sequence of non-negative integers a0,…,an−1, find the maximum pairwise product, that is, the largest integer that can be obtained by multiplying two different elements from the sequence (or, more formally, max0≤i≠j≤n−1aiaj). Different elements here mean ai and aj with i≠j (it can be the case that ai=aj).

Input format

The first line of the input contains an integer n. The next line contains n non-negative integers a0,…,an−1 (separated by spaces).

Constraints

2≤n≤2⋅105; 0≤a0,…,an−1≤105.

Output format

Output a single number — the maximum pairwise product.

Sample 1

Input:



1
2
3
1 2 3
Output:



1
6
Explanation:

6=2×3
Sample 2

Input:



1
2
10
7 5 14 2 8 8 10 1 2 3
Output:



1
140
Explanation:

140=14×10
Sample 3

Input:



1
2
5
4 6 2 6 1
Output:



1
36



Solutuon: 
import java.util.*;
import java.io.*;
import java.math.BigInteger;

public class MaxPairwiseProduct {
    static long getMaxPairwiseProduct(int[] numbers) {
        //BigInteger result = 0;
        int n = numbers.length;
          
        int max_index1 = -1;
        for (int i = 0; i < n; ++i)
          if ((max_index1 == -1) || (numbers[i] > numbers[max_index1]))
            max_index1 = i;

        int max_index2 = -1;
        for (int j = 0; j < n; ++j)
          if ((j != max_index1) && ((max_index2 == -1) || (numbers[j] > numbers[max_index2])))
            max_index2 = j;
        
        return ((long)(numbers[max_index1])) * numbers[max_index2];
    }

    public static void main(String[] args) {
        FastScanner scanner = new FastScanner(System.in);
        int n = scanner.nextInt();
        int[] numbers = new int[n];
        for (int i = 0; i < n; i++) {
            numbers[i] = scanner.nextInt();
        }
        System.out.println(getMaxPairwiseProduct(numbers));
    }

    static class FastScanner {
        BufferedReader br;
        StringTokenizer st;

        FastScanner(InputStream stream) {
            try {
                br = new BufferedReader(new InputStreamReader(stream));
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        String next() {
            while (st == null || !st.hasMoreTokens()) {
                try {
                    st = new StringTokenizer(br.readLine());
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            return st.nextToken();
        }

        int nextInt() {
            return Integer.parseInt(next());
        }
    }

}
